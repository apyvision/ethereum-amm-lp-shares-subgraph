// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get src(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dst(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LOG_COLLECTED_FUND extends ethereum.Event {
  get params(): LOG_COLLECTED_FUND__Params {
    return new LOG_COLLECTED_FUND__Params(this);
  }
}

export class LOG_COLLECTED_FUND__Params {
  _event: LOG_COLLECTED_FUND;

  constructor(event: LOG_COLLECTED_FUND) {
    this._event = event;
  }

  get collectedToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collectedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LOG_EXIT extends ethereum.Event {
  get params(): LOG_EXIT__Params {
    return new LOG_EXIT__Params(this);
  }
}

export class LOG_EXIT__Params {
  _event: LOG_EXIT;

  constructor(event: LOG_EXIT) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LOG_FINALIZE extends ethereum.Event {
  get params(): LOG_FINALIZE__Params {
    return new LOG_FINALIZE__Params(this);
  }
}

export class LOG_FINALIZE__Params {
  _event: LOG_FINALIZE;

  constructor(event: LOG_FINALIZE) {
    this._event = event;
  }

  get swapFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get initPoolSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get version(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bindTokens(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }

  get bindDenorms(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }

  get balances(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }
}

export class LOG_JOIN extends ethereum.Event {
  get params(): LOG_JOIN__Params {
    return new LOG_JOIN__Params(this);
  }
}

export class LOG_JOIN__Params {
  _event: LOG_JOIN;

  constructor(event: LOG_JOIN) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LOG_SWAP extends ethereum.Event {
  get params(): LOG_SWAP__Params {
    return new LOG_SWAP__Params(this);
  }
}

export class LOG_SWAP__Params {
  _event: LOG_SWAP;

  constructor(event: LOG_SWAP) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenAmountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenAmountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RewardPaid extends ethereum.Event {
  get params(): RewardPaid__Params {
    return new RewardPaid__Params(this);
  }
}

export class RewardPaid__Params {
  _event: RewardPaid;

  constructor(event: RewardPaid) {
    this._event = event;
  }

  get pid(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get src(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dst(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FaaSPoolLite__getUserInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class FaaSPoolLite__rewardPoolInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class FaaSPoolLite__swapExactAmountInResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class FaaSPoolLite__swapExactAmountOutResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class FaaSPoolLite extends ethereum.SmartContract {
  static bind(address: Address): FaaSPoolLite {
    return new FaaSPoolLite("FaaSPoolLite", address);
  }

  allowance(src: Address, dst: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(src), ethereum.Value.fromAddress(dst)]
    );

    return result[0].toBigInt();
  }

  try_allowance(src: Address, dst: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(src), ethereum.Value.fromAddress(dst)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(dst: Address, amt: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amt)
    ]);

    return result[0].toBoolean();
  }

  try_approve(dst: Address, amt: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amt)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(whom: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(whom)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(whom: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(whom)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcInGivenOut(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    tokenAmountOut: BigInt,
    swapFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcInGivenOut",
      "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcInGivenOut(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    tokenAmountOut: BigInt,
    swapFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcInGivenOut",
      "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcOutGivenIn(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    tokenAmountIn: BigInt,
    swapFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcOutGivenIn",
      "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcOutGivenIn(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    tokenAmountIn: BigInt,
    swapFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcOutGivenIn",
      "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcPoolOutGivenSingleIn(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    poolSupply: BigInt,
    totalWeight: BigInt,
    tokenAmountIn: BigInt,
    swapFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcPoolOutGivenSingleIn",
      "calcPoolOutGivenSingleIn(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(poolSupply),
        ethereum.Value.fromUnsignedBigInt(totalWeight),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcPoolOutGivenSingleIn(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    poolSupply: BigInt,
    totalWeight: BigInt,
    tokenAmountIn: BigInt,
    swapFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcPoolOutGivenSingleIn",
      "calcPoolOutGivenSingleIn(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(poolSupply),
        ethereum.Value.fromUnsignedBigInt(totalWeight),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcSingleOutGivenPoolIn(
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    poolSupply: BigInt,
    totalWeight: BigInt,
    poolAmountIn: BigInt,
    swapFee: BigInt,
    exitFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcSingleOutGivenPoolIn",
      "calcSingleOutGivenPoolIn(uint256,uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(poolSupply),
        ethereum.Value.fromUnsignedBigInt(totalWeight),
        ethereum.Value.fromUnsignedBigInt(poolAmountIn),
        ethereum.Value.fromUnsignedBigInt(swapFee),
        ethereum.Value.fromUnsignedBigInt(exitFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcSingleOutGivenPoolIn(
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    poolSupply: BigInt,
    totalWeight: BigInt,
    poolAmountIn: BigInt,
    swapFee: BigInt,
    exitFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcSingleOutGivenPoolIn",
      "calcSingleOutGivenPoolIn(uint256,uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(poolSupply),
        ethereum.Value.fromUnsignedBigInt(totalWeight),
        ethereum.Value.fromUnsignedBigInt(poolAmountIn),
        ethereum.Value.fromUnsignedBigInt(swapFee),
        ethereum.Value.fromUnsignedBigInt(exitFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcSpotPrice(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    swapFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcSpotPrice",
      "calcSpotPrice(uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcSpotPrice(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    swapFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcSpotPrice",
      "calcSpotPrice(uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectedFee(): BigInt {
    let result = super.call("collectedFee", "collectedFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_collectedFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("collectedFee", "collectedFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseApproval(dst: Address, amt: BigInt): boolean {
    let result = super.call(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [ethereum.Value.fromAddress(dst), ethereum.Value.fromUnsignedBigInt(amt)]
    );

    return result[0].toBoolean();
  }

  try_decreaseApproval(
    dst: Address,
    amt: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [ethereum.Value.fromAddress(dst), ethereum.Value.fromUnsignedBigInt(amt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  exchangeProxy(): Address {
    let result = super.call("exchangeProxy", "exchangeProxy():(address)", []);

    return result[0].toAddress();
  }

  try_exchangeProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "exchangeProxy",
      "exchangeProxy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exitFee(): BigInt {
    let result = super.call("exitFee", "exitFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_exitFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exitFee", "exitFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exitswapPoolAmountIn(
    tokenOut: Address,
    poolAmountIn: BigInt,
    minAmountOut: BigInt
  ): BigInt {
    let result = super.call(
      "exitswapPoolAmountIn",
      "exitswapPoolAmountIn(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(poolAmountIn),
        ethereum.Value.fromUnsignedBigInt(minAmountOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_exitswapPoolAmountIn(
    tokenOut: Address,
    poolAmountIn: BigInt,
    minAmountOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exitswapPoolAmountIn",
      "exitswapPoolAmountIn(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(poolAmountIn),
        ethereum.Value.fromUnsignedBigInt(minAmountOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  finalized(): boolean {
    let result = super.call("finalized", "finalized():(bool)", []);

    return result[0].toBoolean();
  }

  try_finalized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("finalized", "finalized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBalance(token: Address): BigInt {
    let result = super.call("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_getBalance(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentTokens(): Array<Address> {
    let result = super.call(
      "getCurrentTokens",
      "getCurrentTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getCurrentTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCurrentTokens",
      "getCurrentTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getDenormalizedWeight(token: Address): BigInt {
    let result = super.call(
      "getDenormalizedWeight",
      "getDenormalizedWeight(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getDenormalizedWeight(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDenormalizedWeight",
      "getDenormalizedWeight(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFinalTokens(): Array<Address> {
    let result = super.call(
      "getFinalTokens",
      "getFinalTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getFinalTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getFinalTokens",
      "getFinalTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getNormalizedWeight(token: Address): BigInt {
    let result = super.call(
      "getNormalizedWeight",
      "getNormalizedWeight(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getNormalizedWeight(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNormalizedWeight",
      "getNormalizedWeight(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumTokens(): BigInt {
    let result = super.call("getNumTokens", "getNumTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNumTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNumTokens", "getNumTokens():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSpotPrice(tokenIn: Address, tokenOut: Address): BigInt {
    let result = super.call(
      "getSpotPrice",
      "getSpotPrice(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSpotPrice(
    tokenIn: Address,
    tokenOut: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSpotPrice",
      "getSpotPrice(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSpotPriceSansFee(tokenIn: Address, tokenOut: Address): BigInt {
    let result = super.call(
      "getSpotPriceSansFee",
      "getSpotPriceSansFee(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSpotPriceSansFee(
    tokenIn: Address,
    tokenOut: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSpotPriceSansFee",
      "getSpotPriceSansFee(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalDenormalizedWeight(): BigInt {
    let result = super.call(
      "getTotalDenormalizedWeight",
      "getTotalDenormalizedWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalDenormalizedWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDenormalizedWeight",
      "getTotalDenormalizedWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserInfo(_pid: i32, _account: Address): FaaSPoolLite__getUserInfoResult {
    let result = super.call(
      "getUserInfo",
      "getUserInfo(uint8,address):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_pid)),
        ethereum.Value.fromAddress(_account)
      ]
    );

    return new FaaSPoolLite__getUserInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getUserInfo(
    _pid: i32,
    _account: Address
  ): ethereum.CallResult<FaaSPoolLite__getUserInfoResult> {
    let result = super.tryCall(
      "getUserInfo",
      "getUserInfo(uint8,address):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_pid)),
        ethereum.Value.fromAddress(_account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FaaSPoolLite__getUserInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  increaseApproval(dst: Address, amt: BigInt): boolean {
    let result = super.call(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [ethereum.Value.fromAddress(dst), ethereum.Value.fromUnsignedBigInt(amt)]
    );

    return result[0].toBoolean();
  }

  try_increaseApproval(
    dst: Address,
    amt: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [ethereum.Value.fromAddress(dst), ethereum.Value.fromUnsignedBigInt(amt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBound(t: Address): boolean {
    let result = super.call("isBound", "isBound(address):(bool)", [
      ethereum.Value.fromAddress(t)
    ]);

    return result[0].toBoolean();
  }

  try_isBound(t: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBound", "isBound(address):(bool)", [
      ethereum.Value.fromAddress(t)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  joinswapExternAmountIn(
    tokenIn: Address,
    tokenAmountIn: BigInt,
    minPoolAmountOut: BigInt
  ): BigInt {
    let result = super.call(
      "joinswapExternAmountIn",
      "joinswapExternAmountIn(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(minPoolAmountOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_joinswapExternAmountIn(
    tokenIn: Address,
    tokenAmountIn: BigInt,
    minPoolAmountOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "joinswapExternAmountIn",
      "joinswapExternAmountIn(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(minPoolAmountOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  pendingReward(_pid: i32, _account: Address): BigInt {
    let result = super.call(
      "pendingReward",
      "pendingReward(uint8,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_pid)),
        ethereum.Value.fromAddress(_account)
      ]
    );

    return result[0].toBigInt();
  }

  try_pendingReward(_pid: i32, _account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingReward",
      "pendingReward(uint8,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_pid)),
        ethereum.Value.fromAddress(_account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardFund(): Address {
    let result = super.call("rewardFund", "rewardFund():(address)", []);

    return result[0].toAddress();
  }

  try_rewardFund(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardFund", "rewardFund():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardPoolInfo(param0: BigInt): FaaSPoolLite__rewardPoolInfoResult {
    let result = super.call(
      "rewardPoolInfo",
      "rewardPoolInfo(uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new FaaSPoolLite__rewardPoolInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_rewardPoolInfo(
    param0: BigInt
  ): ethereum.CallResult<FaaSPoolLite__rewardPoolInfoResult> {
    let result = super.tryCall(
      "rewardPoolInfo",
      "rewardPoolInfo(uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FaaSPoolLite__rewardPoolInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  swapExactAmountIn(
    tokenIn: Address,
    tokenAmountIn: BigInt,
    tokenOut: Address,
    minAmountOut: BigInt,
    maxPrice: BigInt
  ): FaaSPoolLite__swapExactAmountInResult {
    let result = super.call(
      "swapExactAmountIn",
      "swapExactAmountIn(address,uint256,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(minAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxPrice)
      ]
    );

    return new FaaSPoolLite__swapExactAmountInResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapExactAmountIn(
    tokenIn: Address,
    tokenAmountIn: BigInt,
    tokenOut: Address,
    minAmountOut: BigInt,
    maxPrice: BigInt
  ): ethereum.CallResult<FaaSPoolLite__swapExactAmountInResult> {
    let result = super.tryCall(
      "swapExactAmountIn",
      "swapExactAmountIn(address,uint256,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(minAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FaaSPoolLite__swapExactAmountInResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  swapExactAmountOut(
    tokenIn: Address,
    maxAmountIn: BigInt,
    tokenOut: Address,
    tokenAmountOut: BigInt,
    maxPrice: BigInt
  ): FaaSPoolLite__swapExactAmountOutResult {
    let result = super.call(
      "swapExactAmountOut",
      "swapExactAmountOut(address,uint256,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(maxAmountIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxPrice)
      ]
    );

    return new FaaSPoolLite__swapExactAmountOutResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapExactAmountOut(
    tokenIn: Address,
    maxAmountIn: BigInt,
    tokenOut: Address,
    tokenAmountOut: BigInt,
    maxPrice: BigInt
  ): ethereum.CallResult<FaaSPoolLite__swapExactAmountOutResult> {
    let result = super.tryCall(
      "swapExactAmountOut",
      "swapExactAmountOut(address,uint256,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(maxAmountIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FaaSPoolLite__swapExactAmountOutResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  swapFee(): BigInt {
    let result = super.call("swapFee", "swapFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_swapFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("swapFee", "swapFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(dst: Address, amt: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amt)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(dst: Address, amt: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amt)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(src: Address, dst: Address, amt: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amt)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    src: Address,
    dst: Address,
    amt: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unfrozenStakeTime(_account: Address): BigInt {
    let result = super.call(
      "unfrozenStakeTime",
      "unfrozenStakeTime(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_unfrozenStakeTime(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unfrozenStakeTime",
      "unfrozenStakeTime(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unstakingFrozenTime(): BigInt {
    let result = super.call(
      "unstakingFrozenTime",
      "unstakingFrozenTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_unstakingFrozenTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstakingFrozenTime",
      "unstakingFrozenTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddRewardPoolCall extends ethereum.Call {
  get inputs(): AddRewardPoolCall__Inputs {
    return new AddRewardPoolCall__Inputs(this);
  }

  get outputs(): AddRewardPoolCall__Outputs {
    return new AddRewardPoolCall__Outputs(this);
  }
}

export class AddRewardPoolCall__Inputs {
  _call: AddRewardPoolCall;

  constructor(call: AddRewardPoolCall) {
    this._call = call;
  }

  get _rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _endRewardBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _rewardPerBlock(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _lockRewardPercent(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _startVestingBlock(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _endVestingBlock(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class AddRewardPoolCall__Outputs {
  _call: AddRewardPoolCall;

  constructor(call: AddRewardPoolCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseApprovalCall extends ethereum.Call {
  get inputs(): DecreaseApprovalCall__Inputs {
    return new DecreaseApprovalCall__Inputs(this);
  }

  get outputs(): DecreaseApprovalCall__Outputs {
    return new DecreaseApprovalCall__Outputs(this);
  }
}

export class DecreaseApprovalCall__Inputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseApprovalCall__Outputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class ExitPoolCall extends ethereum.Call {
  get inputs(): ExitPoolCall__Inputs {
    return new ExitPoolCall__Inputs(this);
  }

  get outputs(): ExitPoolCall__Outputs {
    return new ExitPoolCall__Outputs(this);
  }
}

export class ExitPoolCall__Inputs {
  _call: ExitPoolCall;

  constructor(call: ExitPoolCall) {
    this._call = call;
  }

  get poolAmountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmountsOut(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ExitPoolCall__Outputs {
  _call: ExitPoolCall;

  constructor(call: ExitPoolCall) {
    this._call = call;
  }
}

export class ExitswapPoolAmountInCall extends ethereum.Call {
  get inputs(): ExitswapPoolAmountInCall__Inputs {
    return new ExitswapPoolAmountInCall__Inputs(this);
  }

  get outputs(): ExitswapPoolAmountInCall__Outputs {
    return new ExitswapPoolAmountInCall__Outputs(this);
  }
}

export class ExitswapPoolAmountInCall__Inputs {
  _call: ExitswapPoolAmountInCall;

  constructor(call: ExitswapPoolAmountInCall) {
    this._call = call;
  }

  get tokenOut(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolAmountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmountOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExitswapPoolAmountInCall__Outputs {
  _call: ExitswapPoolAmountInCall;

  constructor(call: ExitswapPoolAmountInCall) {
    this._call = call;
  }

  get tokenAmountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class FinalizeCall extends ethereum.Call {
  get inputs(): FinalizeCall__Inputs {
    return new FinalizeCall__Inputs(this);
  }

  get outputs(): FinalizeCall__Outputs {
    return new FinalizeCall__Outputs(this);
  }
}

export class FinalizeCall__Inputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }

  get _swapFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _initPoolSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bindTokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _bindDenorms(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class FinalizeCall__Outputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }
}

export class FinalizeRewardFundInfoCall extends ethereum.Call {
  get inputs(): FinalizeRewardFundInfoCall__Inputs {
    return new FinalizeRewardFundInfoCall__Inputs(this);
  }

  get outputs(): FinalizeRewardFundInfoCall__Outputs {
    return new FinalizeRewardFundInfoCall__Outputs(this);
  }
}

export class FinalizeRewardFundInfoCall__Inputs {
  _call: FinalizeRewardFundInfoCall;

  constructor(call: FinalizeRewardFundInfoCall) {
    this._call = call;
  }

  get _rewardFund(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _unstakingFrozenTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FinalizeRewardFundInfoCall__Outputs {
  _call: FinalizeRewardFundInfoCall;

  constructor(call: FinalizeRewardFundInfoCall) {
    this._call = call;
  }
}

export class GetAllRewardsCall extends ethereum.Call {
  get inputs(): GetAllRewardsCall__Inputs {
    return new GetAllRewardsCall__Inputs(this);
  }

  get outputs(): GetAllRewardsCall__Outputs {
    return new GetAllRewardsCall__Outputs(this);
  }
}

export class GetAllRewardsCall__Inputs {
  _call: GetAllRewardsCall;

  constructor(call: GetAllRewardsCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetAllRewardsCall__Outputs {
  _call: GetAllRewardsCall;

  constructor(call: GetAllRewardsCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }

  get _pid(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class GulpCall extends ethereum.Call {
  get inputs(): GulpCall__Inputs {
    return new GulpCall__Inputs(this);
  }

  get outputs(): GulpCall__Outputs {
    return new GulpCall__Outputs(this);
  }
}

export class GulpCall__Inputs {
  _call: GulpCall;

  constructor(call: GulpCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GulpCall__Outputs {
  _call: GulpCall;

  constructor(call: GulpCall) {
    this._call = call;
  }
}

export class IncreaseApprovalCall extends ethereum.Call {
  get inputs(): IncreaseApprovalCall__Inputs {
    return new IncreaseApprovalCall__Inputs(this);
  }

  get outputs(): IncreaseApprovalCall__Outputs {
    return new IncreaseApprovalCall__Outputs(this);
  }
}

export class IncreaseApprovalCall__Inputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseApprovalCall__Outputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class JoinPoolCall extends ethereum.Call {
  get inputs(): JoinPoolCall__Inputs {
    return new JoinPoolCall__Inputs(this);
  }

  get outputs(): JoinPoolCall__Outputs {
    return new JoinPoolCall__Outputs(this);
  }
}

export class JoinPoolCall__Inputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }

  get poolAmountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxAmountsIn(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class JoinPoolCall__Outputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }
}

export class JoinPoolForCall extends ethereum.Call {
  get inputs(): JoinPoolForCall__Inputs {
    return new JoinPoolForCall__Inputs(this);
  }

  get outputs(): JoinPoolForCall__Outputs {
    return new JoinPoolForCall__Outputs(this);
  }
}

export class JoinPoolForCall__Inputs {
  _call: JoinPoolForCall;

  constructor(call: JoinPoolForCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolAmountOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxAmountsIn(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class JoinPoolForCall__Outputs {
  _call: JoinPoolForCall;

  constructor(call: JoinPoolForCall) {
    this._call = call;
  }
}

export class JoinPoolNotStakeCall extends ethereum.Call {
  get inputs(): JoinPoolNotStakeCall__Inputs {
    return new JoinPoolNotStakeCall__Inputs(this);
  }

  get outputs(): JoinPoolNotStakeCall__Outputs {
    return new JoinPoolNotStakeCall__Outputs(this);
  }
}

export class JoinPoolNotStakeCall__Inputs {
  _call: JoinPoolNotStakeCall;

  constructor(call: JoinPoolNotStakeCall) {
    this._call = call;
  }

  get poolAmountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxAmountsIn(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class JoinPoolNotStakeCall__Outputs {
  _call: JoinPoolNotStakeCall;

  constructor(call: JoinPoolNotStakeCall) {
    this._call = call;
  }
}

export class JoinswapExternAmountInCall extends ethereum.Call {
  get inputs(): JoinswapExternAmountInCall__Inputs {
    return new JoinswapExternAmountInCall__Inputs(this);
  }

  get outputs(): JoinswapExternAmountInCall__Outputs {
    return new JoinswapExternAmountInCall__Outputs(this);
  }
}

export class JoinswapExternAmountInCall__Inputs {
  _call: JoinswapExternAmountInCall;

  constructor(call: JoinswapExternAmountInCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minPoolAmountOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class JoinswapExternAmountInCall__Outputs {
  _call: JoinswapExternAmountInCall;

  constructor(call: JoinswapExternAmountInCall) {
    this._call = call;
  }

  get poolAmountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetCollectedFeeCall extends ethereum.Call {
  get inputs(): SetCollectedFeeCall__Inputs {
    return new SetCollectedFeeCall__Inputs(this);
  }

  get outputs(): SetCollectedFeeCall__Outputs {
    return new SetCollectedFeeCall__Outputs(this);
  }
}

export class SetCollectedFeeCall__Inputs {
  _call: SetCollectedFeeCall;

  constructor(call: SetCollectedFeeCall) {
    this._call = call;
  }

  get _collectedFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCollectedFeeCall__Outputs {
  _call: SetCollectedFeeCall;

  constructor(call: SetCollectedFeeCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetExchangeProxyCall extends ethereum.Call {
  get inputs(): SetExchangeProxyCall__Inputs {
    return new SetExchangeProxyCall__Inputs(this);
  }

  get outputs(): SetExchangeProxyCall__Outputs {
    return new SetExchangeProxyCall__Outputs(this);
  }
}

export class SetExchangeProxyCall__Inputs {
  _call: SetExchangeProxyCall;

  constructor(call: SetExchangeProxyCall) {
    this._call = call;
  }

  get _exchangeProxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExchangeProxyCall__Outputs {
  _call: SetExchangeProxyCall;

  constructor(call: SetExchangeProxyCall) {
    this._call = call;
  }
}

export class SetExitFeeCall extends ethereum.Call {
  get inputs(): SetExitFeeCall__Inputs {
    return new SetExitFeeCall__Inputs(this);
  }

  get outputs(): SetExitFeeCall__Outputs {
    return new SetExitFeeCall__Outputs(this);
  }
}

export class SetExitFeeCall__Inputs {
  _call: SetExitFeeCall;

  constructor(call: SetExitFeeCall) {
    this._call = call;
  }

  get _exitFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetExitFeeCall__Outputs {
  _call: SetExitFeeCall;

  constructor(call: SetExitFeeCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class SwapExactAmountInCall extends ethereum.Call {
  get inputs(): SwapExactAmountInCall__Inputs {
    return new SwapExactAmountInCall__Inputs(this);
  }

  get outputs(): SwapExactAmountInCall__Outputs {
    return new SwapExactAmountInCall__Outputs(this);
  }
}

export class SwapExactAmountInCall__Inputs {
  _call: SwapExactAmountInCall;

  constructor(call: SwapExactAmountInCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenOut(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get minAmountOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get maxPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactAmountInCall__Outputs {
  _call: SwapExactAmountInCall;

  constructor(call: SwapExactAmountInCall) {
    this._call = call;
  }

  get tokenAmountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get spotPriceAfter(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapExactAmountOutCall extends ethereum.Call {
  get inputs(): SwapExactAmountOutCall__Inputs {
    return new SwapExactAmountOutCall__Inputs(this);
  }

  get outputs(): SwapExactAmountOutCall__Outputs {
    return new SwapExactAmountOutCall__Outputs(this);
  }
}

export class SwapExactAmountOutCall__Inputs {
  _call: SwapExactAmountOutCall;

  constructor(call: SwapExactAmountOutCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxAmountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenOut(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokenAmountOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get maxPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactAmountOutCall__Outputs {
  _call: SwapExactAmountOutCall;

  constructor(call: SwapExactAmountOutCall) {
    this._call = call;
  }

  get tokenAmountIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get spotPriceAfter(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateRewardCall extends ethereum.Call {
  get inputs(): UpdateRewardCall__Inputs {
    return new UpdateRewardCall__Inputs(this);
  }

  get outputs(): UpdateRewardCall__Outputs {
    return new UpdateRewardCall__Outputs(this);
  }
}

export class UpdateRewardCall__Inputs {
  _call: UpdateRewardCall;

  constructor(call: UpdateRewardCall) {
    this._call = call;
  }

  get _pid(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class UpdateRewardCall__Outputs {
  _call: UpdateRewardCall;

  constructor(call: UpdateRewardCall) {
    this._call = call;
  }
}

export class UpdateReward1Call extends ethereum.Call {
  get inputs(): UpdateReward1Call__Inputs {
    return new UpdateReward1Call__Inputs(this);
  }

  get outputs(): UpdateReward1Call__Outputs {
    return new UpdateReward1Call__Outputs(this);
  }
}

export class UpdateReward1Call__Inputs {
  _call: UpdateReward1Call;

  constructor(call: UpdateReward1Call) {
    this._call = call;
  }
}

export class UpdateReward1Call__Outputs {
  _call: UpdateReward1Call;

  constructor(call: UpdateReward1Call) {
    this._call = call;
  }
}

export class UpdateRewardPoolCall extends ethereum.Call {
  get inputs(): UpdateRewardPoolCall__Inputs {
    return new UpdateRewardPoolCall__Inputs(this);
  }

  get outputs(): UpdateRewardPoolCall__Outputs {
    return new UpdateRewardPoolCall__Outputs(this);
  }
}

export class UpdateRewardPoolCall__Inputs {
  _call: UpdateRewardPoolCall;

  constructor(call: UpdateRewardPoolCall) {
    this._call = call;
  }

  get _pid(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _endRewardBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rewardPerBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateRewardPoolCall__Outputs {
  _call: UpdateRewardPoolCall;

  constructor(call: UpdateRewardPoolCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
