// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CapChanged extends ethereum.Event {
  get params(): CapChanged__Params {
    return new CapChanged__Params(this);
  }
}

export class CapChanged__Params {
  _event: CapChanged;

  constructor(event: CapChanged) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldCap(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newCap(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogCall extends ethereum.Event {
  get params(): LogCall__Params {
    return new LogCall__Params(this);
  }
}

export class LogCall__Params {
  _event: LogCall;

  constructor(event: LogCall) {
    this._event = event;
  }

  get sig(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class LogExit extends ethereum.Event {
  get params(): LogExit__Params {
    return new LogExit__Params(this);
  }
}

export class LogExit__Params {
  _event: LogExit;

  constructor(event: LogExit) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogJoin extends ethereum.Event {
  get params(): LogJoin__Params {
    return new LogJoin__Params(this);
  }
}

export class LogJoin__Params {
  _event: LogJoin;

  constructor(event: LogJoin) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewTokenCommitted extends ethereum.Event {
  get params(): NewTokenCommitted__Params {
    return new NewTokenCommitted__Params(this);
  }
}

export class NewTokenCommitted__Params {
  _event: NewTokenCommitted;

  constructor(event: NewTokenCommitted) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BPoolSmart__gradualUpdateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class BPoolSmart__newTokenResult {
  value0: Address;
  value1: boolean;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: boolean,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class BPoolSmart__rightsResult {
  value0: boolean;
  value1: boolean;
  value2: boolean;
  value3: boolean;
  value4: boolean;
  value5: boolean;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: boolean,
    value3: boolean,
    value4: boolean,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }
}

export class BPoolSmart extends ethereum.SmartContract {
  static bind(address: Address): BPoolSmart {
    return new BPoolSmart("BPoolSmart", address);
  }

  DECIMALS(): i32 {
    let result = super.call("DECIMALS", "DECIMALS():(uint8)", []);

    return result[0].toI32();
  }

  try_DECIMALS(): ethereum.CallResult<i32> {
    let result = super.tryCall("DECIMALS", "DECIMALS():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS(): BigInt {
    let result = super.call(
      "DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS",
      "DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS",
      "DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD(): BigInt {
    let result = super.call(
      "DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD",
      "DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD",
      "DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  addTokenTimeLockInBlocks(): BigInt {
    let result = super.call(
      "addTokenTimeLockInBlocks",
      "addTokenTimeLockInBlocks():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_addTokenTimeLockInBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addTokenTimeLockInBlocks",
      "addTokenTimeLockInBlocks():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  bFactory(): Address {
    let result = super.call("bFactory", "bFactory():(address)", []);

    return result[0].toAddress();
  }

  try_bFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("bFactory", "bFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bPool(): Address {
    let result = super.call("bPool", "bPool():(address)", []);

    return result[0].toAddress();
  }

  try_bPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("bPool", "bPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bspCap(): BigInt {
    let result = super.call("bspCap", "bspCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bspCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bspCap", "bspCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canProvideLiquidity(provider: Address): boolean {
    let result = super.call(
      "canProvideLiquidity",
      "canProvideLiquidity(address):(bool)",
      [ethereum.Value.fromAddress(provider)]
    );

    return result[0].toBoolean();
  }

  try_canProvideLiquidity(provider: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canProvideLiquidity",
      "canProvideLiquidity(address):(bool)",
      [ethereum.Value.fromAddress(provider)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseApproval(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseApproval(
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  exitswapExternAmountOut(
    tokenOut: Address,
    tokenAmountOut: BigInt,
    maxPoolAmountIn: BigInt
  ): BigInt {
    let result = super.call(
      "exitswapExternAmountOut",
      "exitswapExternAmountOut(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxPoolAmountIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_exitswapExternAmountOut(
    tokenOut: Address,
    tokenAmountOut: BigInt,
    maxPoolAmountIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exitswapExternAmountOut",
      "exitswapExternAmountOut(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxPoolAmountIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exitswapPoolAmountIn(
    tokenOut: Address,
    poolAmountIn: BigInt,
    minAmountOut: BigInt
  ): BigInt {
    let result = super.call(
      "exitswapPoolAmountIn",
      "exitswapPoolAmountIn(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(poolAmountIn),
        ethereum.Value.fromUnsignedBigInt(minAmountOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_exitswapPoolAmountIn(
    tokenOut: Address,
    poolAmountIn: BigInt,
    minAmountOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exitswapPoolAmountIn",
      "exitswapPoolAmountIn(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(poolAmountIn),
        ethereum.Value.fromUnsignedBigInt(minAmountOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBalancerSafeMathVersion(): Address {
    let result = super.call(
      "getBalancerSafeMathVersion",
      "getBalancerSafeMathVersion():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getBalancerSafeMathVersion(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBalancerSafeMathVersion",
      "getBalancerSafeMathVersion():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getController(): Address {
    let result = super.call("getController", "getController():(address)", []);

    return result[0].toAddress();
  }

  try_getController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getController",
      "getController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDenormalizedWeight(token: Address): BigInt {
    let result = super.call(
      "getDenormalizedWeight",
      "getDenormalizedWeight(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getDenormalizedWeight(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDenormalizedWeight",
      "getDenormalizedWeight(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRightsManagerVersion(): Address {
    let result = super.call(
      "getRightsManagerVersion",
      "getRightsManagerVersion():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRightsManagerVersion(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRightsManagerVersion",
      "getRightsManagerVersion():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSmartPoolManagerVersion(): Address {
    let result = super.call(
      "getSmartPoolManagerVersion",
      "getSmartPoolManagerVersion():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getSmartPoolManagerVersion(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSmartPoolManagerVersion",
      "getSmartPoolManagerVersion():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gradualUpdate(): BPoolSmart__gradualUpdateResult {
    let result = super.call(
      "gradualUpdate",
      "gradualUpdate():(uint256,uint256)",
      []
    );

    return new BPoolSmart__gradualUpdateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_gradualUpdate(): ethereum.CallResult<BPoolSmart__gradualUpdateResult> {
    let result = super.tryCall(
      "gradualUpdate",
      "gradualUpdate():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BPoolSmart__gradualUpdateResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  hasPermission(permission: i32): boolean {
    let result = super.call("hasPermission", "hasPermission(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(permission))
    ]);

    return result[0].toBoolean();
  }

  try_hasPermission(permission: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasPermission", "hasPermission(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(permission))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseApproval(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseApproval(
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPublicSwap(): boolean {
    let result = super.call("isPublicSwap", "isPublicSwap():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPublicSwap(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPublicSwap", "isPublicSwap():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  joinswapExternAmountIn(
    tokenIn: Address,
    tokenAmountIn: BigInt,
    minPoolAmountOut: BigInt
  ): BigInt {
    let result = super.call(
      "joinswapExternAmountIn",
      "joinswapExternAmountIn(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(minPoolAmountOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_joinswapExternAmountIn(
    tokenIn: Address,
    tokenAmountIn: BigInt,
    minPoolAmountOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "joinswapExternAmountIn",
      "joinswapExternAmountIn(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(minPoolAmountOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  joinswapPoolAmountOut(
    tokenIn: Address,
    poolAmountOut: BigInt,
    maxAmountIn: BigInt
  ): BigInt {
    let result = super.call(
      "joinswapPoolAmountOut",
      "joinswapPoolAmountOut(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(poolAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxAmountIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_joinswapPoolAmountOut(
    tokenIn: Address,
    poolAmountOut: BigInt,
    maxAmountIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "joinswapPoolAmountOut",
      "joinswapPoolAmountOut(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromUnsignedBigInt(poolAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxAmountIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumWeightChangeBlockPeriod(): BigInt {
    let result = super.call(
      "minimumWeightChangeBlockPeriod",
      "minimumWeightChangeBlockPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumWeightChangeBlockPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumWeightChangeBlockPeriod",
      "minimumWeightChangeBlockPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  newToken(): BPoolSmart__newTokenResult {
    let result = super.call(
      "newToken",
      "newToken():(address,bool,uint256,uint256,uint256)",
      []
    );

    return new BPoolSmart__newTokenResult(
      result[0].toAddress(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_newToken(): ethereum.CallResult<BPoolSmart__newTokenResult> {
    let result = super.tryCall(
      "newToken",
      "newToken():(address,bool,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BPoolSmart__newTokenResult(
        value[0].toAddress(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  rights(): BPoolSmart__rightsResult {
    let result = super.call(
      "rights",
      "rights():(bool,bool,bool,bool,bool,bool)",
      []
    );

    return new BPoolSmart__rightsResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toBoolean(),
      result[5].toBoolean()
    );
  }

  try_rights(): ethereum.CallResult<BPoolSmart__rightsResult> {
    let result = super.tryCall(
      "rights",
      "rights():(bool,bool,bool,bool,bool,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BPoolSmart__rightsResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toBoolean(),
        value[5].toBoolean()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get factoryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolParams(): ConstructorCallPoolParamsStruct {
    return this._call.inputValues[1].value.toTuple() as ConstructorCallPoolParamsStruct;
  }

  get rightsStruct(): ConstructorCallRightsStructStruct {
    return this._call.inputValues[2].value.toTuple() as ConstructorCallRightsStructStruct;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallPoolParamsStruct extends ethereum.Tuple {
  get poolTokenSymbol(): string {
    return this[0].toString();
  }

  get poolTokenName(): string {
    return this[1].toString();
  }

  get constituentTokens(): Array<Address> {
    return this[2].toAddressArray();
  }

  get tokenBalances(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get tokenWeights(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get swapFee(): BigInt {
    return this[5].toBigInt();
  }
}

export class ConstructorCallRightsStructStruct extends ethereum.Tuple {
  get canPauseSwapping(): boolean {
    return this[0].toBoolean();
  }

  get canChangeSwapFee(): boolean {
    return this[1].toBoolean();
  }

  get canChangeWeights(): boolean {
    return this[2].toBoolean();
  }

  get canAddRemoveTokens(): boolean {
    return this[3].toBoolean();
  }

  get canWhitelistLPs(): boolean {
    return this[4].toBoolean();
  }

  get canChangeCap(): boolean {
    return this[5].toBoolean();
  }
}

export class ApplyAddTokenCall extends ethereum.Call {
  get inputs(): ApplyAddTokenCall__Inputs {
    return new ApplyAddTokenCall__Inputs(this);
  }

  get outputs(): ApplyAddTokenCall__Outputs {
    return new ApplyAddTokenCall__Outputs(this);
  }
}

export class ApplyAddTokenCall__Inputs {
  _call: ApplyAddTokenCall;

  constructor(call: ApplyAddTokenCall) {
    this._call = call;
  }
}

export class ApplyAddTokenCall__Outputs {
  _call: ApplyAddTokenCall;

  constructor(call: ApplyAddTokenCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnPoolShareFromLibCall extends ethereum.Call {
  get inputs(): BurnPoolShareFromLibCall__Inputs {
    return new BurnPoolShareFromLibCall__Inputs(this);
  }

  get outputs(): BurnPoolShareFromLibCall__Outputs {
    return new BurnPoolShareFromLibCall__Outputs(this);
  }
}

export class BurnPoolShareFromLibCall__Inputs {
  _call: BurnPoolShareFromLibCall;

  constructor(call: BurnPoolShareFromLibCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnPoolShareFromLibCall__Outputs {
  _call: BurnPoolShareFromLibCall;

  constructor(call: BurnPoolShareFromLibCall) {
    this._call = call;
  }
}

export class CommitAddTokenCall extends ethereum.Call {
  get inputs(): CommitAddTokenCall__Inputs {
    return new CommitAddTokenCall__Inputs(this);
  }

  get outputs(): CommitAddTokenCall__Outputs {
    return new CommitAddTokenCall__Outputs(this);
  }
}

export class CommitAddTokenCall__Inputs {
  _call: CommitAddTokenCall;

  constructor(call: CommitAddTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get balance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get denormalizedWeight(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CommitAddTokenCall__Outputs {
  _call: CommitAddTokenCall;

  constructor(call: CommitAddTokenCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get initialSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }
}

export class CreatePool1Call extends ethereum.Call {
  get inputs(): CreatePool1Call__Inputs {
    return new CreatePool1Call__Inputs(this);
  }

  get outputs(): CreatePool1Call__Outputs {
    return new CreatePool1Call__Outputs(this);
  }
}

export class CreatePool1Call__Inputs {
  _call: CreatePool1Call;

  constructor(call: CreatePool1Call) {
    this._call = call;
  }

  get initialSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minimumWeightChangeBlockPeriodParam(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get addTokenTimeLockInBlocksParam(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreatePool1Call__Outputs {
  _call: CreatePool1Call;

  constructor(call: CreatePool1Call) {
    this._call = call;
  }
}

export class DecreaseApprovalCall extends ethereum.Call {
  get inputs(): DecreaseApprovalCall__Inputs {
    return new DecreaseApprovalCall__Inputs(this);
  }

  get outputs(): DecreaseApprovalCall__Outputs {
    return new DecreaseApprovalCall__Outputs(this);
  }
}

export class DecreaseApprovalCall__Inputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseApprovalCall__Outputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExitPoolCall extends ethereum.Call {
  get inputs(): ExitPoolCall__Inputs {
    return new ExitPoolCall__Inputs(this);
  }

  get outputs(): ExitPoolCall__Outputs {
    return new ExitPoolCall__Outputs(this);
  }
}

export class ExitPoolCall__Inputs {
  _call: ExitPoolCall;

  constructor(call: ExitPoolCall) {
    this._call = call;
  }

  get poolAmountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmountsOut(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ExitPoolCall__Outputs {
  _call: ExitPoolCall;

  constructor(call: ExitPoolCall) {
    this._call = call;
  }
}

export class ExitswapExternAmountOutCall extends ethereum.Call {
  get inputs(): ExitswapExternAmountOutCall__Inputs {
    return new ExitswapExternAmountOutCall__Inputs(this);
  }

  get outputs(): ExitswapExternAmountOutCall__Outputs {
    return new ExitswapExternAmountOutCall__Outputs(this);
  }
}

export class ExitswapExternAmountOutCall__Inputs {
  _call: ExitswapExternAmountOutCall;

  constructor(call: ExitswapExternAmountOutCall) {
    this._call = call;
  }

  get tokenOut(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmountOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxPoolAmountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExitswapExternAmountOutCall__Outputs {
  _call: ExitswapExternAmountOutCall;

  constructor(call: ExitswapExternAmountOutCall) {
    this._call = call;
  }

  get poolAmountIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExitswapPoolAmountInCall extends ethereum.Call {
  get inputs(): ExitswapPoolAmountInCall__Inputs {
    return new ExitswapPoolAmountInCall__Inputs(this);
  }

  get outputs(): ExitswapPoolAmountInCall__Outputs {
    return new ExitswapPoolAmountInCall__Outputs(this);
  }
}

export class ExitswapPoolAmountInCall__Inputs {
  _call: ExitswapPoolAmountInCall;

  constructor(call: ExitswapPoolAmountInCall) {
    this._call = call;
  }

  get tokenOut(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolAmountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmountOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExitswapPoolAmountInCall__Outputs {
  _call: ExitswapPoolAmountInCall;

  constructor(call: ExitswapPoolAmountInCall) {
    this._call = call;
  }

  get tokenAmountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseApprovalCall extends ethereum.Call {
  get inputs(): IncreaseApprovalCall__Inputs {
    return new IncreaseApprovalCall__Inputs(this);
  }

  get outputs(): IncreaseApprovalCall__Outputs {
    return new IncreaseApprovalCall__Outputs(this);
  }
}

export class IncreaseApprovalCall__Inputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseApprovalCall__Outputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class JoinPoolCall extends ethereum.Call {
  get inputs(): JoinPoolCall__Inputs {
    return new JoinPoolCall__Inputs(this);
  }

  get outputs(): JoinPoolCall__Outputs {
    return new JoinPoolCall__Outputs(this);
  }
}

export class JoinPoolCall__Inputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }

  get poolAmountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxAmountsIn(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class JoinPoolCall__Outputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }
}

export class JoinswapExternAmountInCall extends ethereum.Call {
  get inputs(): JoinswapExternAmountInCall__Inputs {
    return new JoinswapExternAmountInCall__Inputs(this);
  }

  get outputs(): JoinswapExternAmountInCall__Outputs {
    return new JoinswapExternAmountInCall__Outputs(this);
  }
}

export class JoinswapExternAmountInCall__Inputs {
  _call: JoinswapExternAmountInCall;

  constructor(call: JoinswapExternAmountInCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minPoolAmountOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class JoinswapExternAmountInCall__Outputs {
  _call: JoinswapExternAmountInCall;

  constructor(call: JoinswapExternAmountInCall) {
    this._call = call;
  }

  get poolAmountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class JoinswapPoolAmountOutCall extends ethereum.Call {
  get inputs(): JoinswapPoolAmountOutCall__Inputs {
    return new JoinswapPoolAmountOutCall__Inputs(this);
  }

  get outputs(): JoinswapPoolAmountOutCall__Outputs {
    return new JoinswapPoolAmountOutCall__Outputs(this);
  }
}

export class JoinswapPoolAmountOutCall__Inputs {
  _call: JoinswapPoolAmountOutCall;

  constructor(call: JoinswapPoolAmountOutCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolAmountOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxAmountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class JoinswapPoolAmountOutCall__Outputs {
  _call: JoinswapPoolAmountOutCall;

  constructor(call: JoinswapPoolAmountOutCall) {
    this._call = call;
  }

  get tokenAmountIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintPoolShareFromLibCall extends ethereum.Call {
  get inputs(): MintPoolShareFromLibCall__Inputs {
    return new MintPoolShareFromLibCall__Inputs(this);
  }

  get outputs(): MintPoolShareFromLibCall__Outputs {
    return new MintPoolShareFromLibCall__Outputs(this);
  }
}

export class MintPoolShareFromLibCall__Inputs {
  _call: MintPoolShareFromLibCall;

  constructor(call: MintPoolShareFromLibCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintPoolShareFromLibCall__Outputs {
  _call: MintPoolShareFromLibCall;

  constructor(call: MintPoolShareFromLibCall) {
    this._call = call;
  }
}

export class PokeWeightsCall extends ethereum.Call {
  get inputs(): PokeWeightsCall__Inputs {
    return new PokeWeightsCall__Inputs(this);
  }

  get outputs(): PokeWeightsCall__Outputs {
    return new PokeWeightsCall__Outputs(this);
  }
}

export class PokeWeightsCall__Inputs {
  _call: PokeWeightsCall;

  constructor(call: PokeWeightsCall) {
    this._call = call;
  }
}

export class PokeWeightsCall__Outputs {
  _call: PokeWeightsCall;

  constructor(call: PokeWeightsCall) {
    this._call = call;
  }
}

export class PullPoolShareFromLibCall extends ethereum.Call {
  get inputs(): PullPoolShareFromLibCall__Inputs {
    return new PullPoolShareFromLibCall__Inputs(this);
  }

  get outputs(): PullPoolShareFromLibCall__Outputs {
    return new PullPoolShareFromLibCall__Outputs(this);
  }
}

export class PullPoolShareFromLibCall__Inputs {
  _call: PullPoolShareFromLibCall;

  constructor(call: PullPoolShareFromLibCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PullPoolShareFromLibCall__Outputs {
  _call: PullPoolShareFromLibCall;

  constructor(call: PullPoolShareFromLibCall) {
    this._call = call;
  }
}

export class PushPoolShareFromLibCall extends ethereum.Call {
  get inputs(): PushPoolShareFromLibCall__Inputs {
    return new PushPoolShareFromLibCall__Inputs(this);
  }

  get outputs(): PushPoolShareFromLibCall__Outputs {
    return new PushPoolShareFromLibCall__Outputs(this);
  }
}

export class PushPoolShareFromLibCall__Inputs {
  _call: PushPoolShareFromLibCall;

  constructor(call: PushPoolShareFromLibCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PushPoolShareFromLibCall__Outputs {
  _call: PushPoolShareFromLibCall;

  constructor(call: PushPoolShareFromLibCall) {
    this._call = call;
  }
}

export class RemoveTokenCall extends ethereum.Call {
  get inputs(): RemoveTokenCall__Inputs {
    return new RemoveTokenCall__Inputs(this);
  }

  get outputs(): RemoveTokenCall__Outputs {
    return new RemoveTokenCall__Outputs(this);
  }
}

export class RemoveTokenCall__Inputs {
  _call: RemoveTokenCall;

  constructor(call: RemoveTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveTokenCall__Outputs {
  _call: RemoveTokenCall;

  constructor(call: RemoveTokenCall) {
    this._call = call;
  }
}

export class RemoveWhitelistedLiquidityProviderCall extends ethereum.Call {
  get inputs(): RemoveWhitelistedLiquidityProviderCall__Inputs {
    return new RemoveWhitelistedLiquidityProviderCall__Inputs(this);
  }

  get outputs(): RemoveWhitelistedLiquidityProviderCall__Outputs {
    return new RemoveWhitelistedLiquidityProviderCall__Outputs(this);
  }
}

export class RemoveWhitelistedLiquidityProviderCall__Inputs {
  _call: RemoveWhitelistedLiquidityProviderCall;

  constructor(call: RemoveWhitelistedLiquidityProviderCall) {
    this._call = call;
  }

  get provider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveWhitelistedLiquidityProviderCall__Outputs {
  _call: RemoveWhitelistedLiquidityProviderCall;

  constructor(call: RemoveWhitelistedLiquidityProviderCall) {
    this._call = call;
  }
}

export class ResyncWeightCall extends ethereum.Call {
  get inputs(): ResyncWeightCall__Inputs {
    return new ResyncWeightCall__Inputs(this);
  }

  get outputs(): ResyncWeightCall__Outputs {
    return new ResyncWeightCall__Outputs(this);
  }
}

export class ResyncWeightCall__Inputs {
  _call: ResyncWeightCall;

  constructor(call: ResyncWeightCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ResyncWeightCall__Outputs {
  _call: ResyncWeightCall;

  constructor(call: ResyncWeightCall) {
    this._call = call;
  }
}

export class SetCapCall extends ethereum.Call {
  get inputs(): SetCapCall__Inputs {
    return new SetCapCall__Inputs(this);
  }

  get outputs(): SetCapCall__Outputs {
    return new SetCapCall__Outputs(this);
  }
}

export class SetCapCall__Inputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }

  get newCap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCapCall__Outputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetPublicSwapCall extends ethereum.Call {
  get inputs(): SetPublicSwapCall__Inputs {
    return new SetPublicSwapCall__Inputs(this);
  }

  get outputs(): SetPublicSwapCall__Outputs {
    return new SetPublicSwapCall__Outputs(this);
  }
}

export class SetPublicSwapCall__Inputs {
  _call: SetPublicSwapCall;

  constructor(call: SetPublicSwapCall) {
    this._call = call;
  }

  get publicSwap(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPublicSwapCall__Outputs {
  _call: SetPublicSwapCall;

  constructor(call: SetPublicSwapCall) {
    this._call = call;
  }
}

export class SetSwapFeeCall extends ethereum.Call {
  get inputs(): SetSwapFeeCall__Inputs {
    return new SetSwapFeeCall__Inputs(this);
  }

  get outputs(): SetSwapFeeCall__Outputs {
    return new SetSwapFeeCall__Outputs(this);
  }
}

export class SetSwapFeeCall__Inputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }

  get swapFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapFeeCall__Outputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateWeightCall extends ethereum.Call {
  get inputs(): UpdateWeightCall__Inputs {
    return new UpdateWeightCall__Inputs(this);
  }

  get outputs(): UpdateWeightCall__Outputs {
    return new UpdateWeightCall__Outputs(this);
  }
}

export class UpdateWeightCall__Inputs {
  _call: UpdateWeightCall;

  constructor(call: UpdateWeightCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newWeight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateWeightCall__Outputs {
  _call: UpdateWeightCall;

  constructor(call: UpdateWeightCall) {
    this._call = call;
  }
}

export class UpdateWeightsGraduallyCall extends ethereum.Call {
  get inputs(): UpdateWeightsGraduallyCall__Inputs {
    return new UpdateWeightsGraduallyCall__Inputs(this);
  }

  get outputs(): UpdateWeightsGraduallyCall__Outputs {
    return new UpdateWeightsGraduallyCall__Outputs(this);
  }
}

export class UpdateWeightsGraduallyCall__Inputs {
  _call: UpdateWeightsGraduallyCall;

  constructor(call: UpdateWeightsGraduallyCall) {
    this._call = call;
  }

  get newWeights(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get startBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get endBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateWeightsGraduallyCall__Outputs {
  _call: UpdateWeightsGraduallyCall;

  constructor(call: UpdateWeightsGraduallyCall) {
    this._call = call;
  }
}

export class WhitelistLiquidityProviderCall extends ethereum.Call {
  get inputs(): WhitelistLiquidityProviderCall__Inputs {
    return new WhitelistLiquidityProviderCall__Inputs(this);
  }

  get outputs(): WhitelistLiquidityProviderCall__Outputs {
    return new WhitelistLiquidityProviderCall__Outputs(this);
  }
}

export class WhitelistLiquidityProviderCall__Inputs {
  _call: WhitelistLiquidityProviderCall;

  constructor(call: WhitelistLiquidityProviderCall) {
    this._call = call;
  }

  get provider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WhitelistLiquidityProviderCall__Outputs {
  _call: WhitelistLiquidityProviderCall;

  constructor(call: WhitelistLiquidityProviderCall) {
    this._call = call;
  }
}
